create schema HMS;

 CREATE TABLE Patients ( 
 patient_id SERIAL PRIMARY KEY,
 name VARCHAR(100),
 age INT,
 gender VARCHAR(10),
 contact_number VARCHAR(20) 
 );
 
 CREATE TABLE Doctors ( doctor_id SERIAL PRIMARY KEY,
 name VARCHAR(100),
 specialization VARCHAR(50),
 contact_number VARCHAR(20)
 ); 
 
CREATE TABLE Appointments ( 
appointment_id SERIAL PRIMARY KEY,
patient_id INT REFERENCES Patients(patient_id),
doctor_id INT REFERENCES Doctors(doctor_id),
appointment_date DATE,
notes TEXT 
);

 INSERT INTO Patients (name, age, gender, contact_number) VALUES 
 ('Alice Johnson', 34, 'Female', '555-1234'),
 ('Bob Smith', 58, 'Male', '555-2345'),
 ('Charlie Brown', 45, 'Male', '555-3456'),
 ('Diana Prince', 29, 'Female', '555-4567'),
 ('Ethan Hunt', 61, 'Male', '555-5678');
 
INSERT INTO Doctors (name, specialization, contact_number) VALUES 
('Dr. Emma Carter', 'Cardiology', '555-0001'),
('Dr. John Miller', 'Neurology', '555-0002'),
('Dr. Sarah Lee', 'General', '555-0003');

 INSERT INTO Appointments (patient_id, doctor_id, appointment_date, notes) VALUES 
 (1, 1, '2025-04-18', 'Mild chest pain, advised ECG.'),
 (2, 1, '2025-04-17', 'Follow-up after stent procedure.'),
 (3, 2, '2025-04-18', 'Complains of migraines.'),
 (4, 3, '2025-04-15', 'Regular health check-up.'),
 (5, 1, '2025-04-16', 'High blood pressure, recommended test.'),
 (1, 3, '2025-04-14', 'Flu symptoms, prescribed medicine.');


--List all patients who are older than 50.
CREATE OR REPLACE FUNCTION age_filter(given_age INT)
RETURNS TABLE(patient_id INT, name VARCHAR(100), age INT, gender VARCHAR(100)) AS $$
BEGIN
    RETURN QUERY 
    SELECT P.patient_id, P.name, P.age, P.gender 
    FROM Patients P
    WHERE P.age >= given_age;
END;
$$ LANGUAGE plpgsql;

select age_filter(10);


--2  the total number of doctors in the hospital.
CREATE OR REPLACE FUNCTION count_records(table_name TEXT)
RETURNS BIGINT AS $$
DECLARE
    record_count BIGINT;
BEGIN
    -- Use double quotes for schema and table to ensure case sensitivity
    EXECUTE FORMAT('SELECT COUNT(*) FROM %I', table_name)
    INTO record_count;
    RETURN record_count;
END;
$$ LANGUAGE plpgsql;

SELECT count_records('HMS.Patients');


--3 Show all appointments scheduled for today.
DROP TYPE IF EXISTS appointmentData;
drop function if exists appointmentDate_filter
create  type appointmentData as (
  appointment_id int,
  patient_name varchar(100),
  doctor_name varchar(100),
  notes text
)

create or replace function appointmentDate_filter(given_date date)
returns setof appointmentData as $$
begin 
return query
select A.appointment_id,P.name,D.name, A.notes from Appointments A join Doctors D
on A.doctor_id=D.doctor_id join Patients P on A.patient_id=p.patient_id
where A.appointment_date=given_date;
end;
$$ language plpgsql;

select appointmentDate_filter('2025-04-14')




-- 4 Retrieve the names of patients who have appointments with a cardiologist.
create type patient_details as(
	patient_name varchar(100),
	age int,
	appointment_with varchar(50),
	doctor_name varchar(100),
	appointment_date date
)

create or replace function specialization_filter(given_spl varchar(50))
returns setof patient_details as $$
begin 
return query
select P.name,P.age,D.specialization , D.name,A.appointment_date
from Appointments A join Doctors D
on A.doctor_id=D.doctor_id join Patients P on A.patient_id=p.patient_id
where D.specialization =given_spl;
end;
$$ language plpgsql;

select specialization_filter('Neurology')


--5 List all doctors along with the number of appointments they have.
create or replace function appointment_count()
returns table (name varchar(100), total int) as $$
begin 
return query
select D.name , count(*):: int from Appointments A join Doctors D on A.doctor_id=D.doctor_id
group by D.name;
end;
$$ language plpgsql;

select appointment_count()

--Count(*) always returns bigint type 


--6 Find the patient who has the most appointments.
create or replace function mostAppointment_patients(n int)
returns table(patient_id int,patient_name varchar(100),total int) as $$
begin 
return query
	select P.patient_id,P.name,count(*)::int as total
	from Appointments A join Doctors D
on A.doctor_id=D.doctor_id join Patients P on A.patient_id=p.patient_id
group by P.patient_id,P.name 
order by total desc
limit n;
end;
$$ language plpgsql;
select mostAppointment_patients(20);


Get details of all appointments including patient and doctor names.
create type appointment_details as(
doctor_name varchar(100),
patient_name varchar(100),
appointment_date date
)
create or replace function appointment_details (n int)
returns setof appointment_details as $$
begin
return query 
select D.name,P.name,A.appointment_date
	from Appointments A join Doctors D
on A.doctor_id=D.doctor_id join Patients P on A.patient_id=p.patient_id
order by P.name limit n;
end; 
$$ language plpgsql;

select appointment_details(3);


List patients who donâ€™t have any appointments.
create or replace function patients_without_appointments()
returns table (
    patient_id int,
    patient_name varchar(100)
) as $$
begin
    return query
    select 
        p.patient_id, 
        p.name as patient_name
    from 
        patients p
    where 
        p.patient_id not in (select distinct a.patient_id from appointments a);
end;
$$ language plpgsql;

select patients_without_appointments()

Which doctor has seen the most unique patients? 

create or replace function get_doctor_with_most_unique_patients()
returns table (
    doctor_id int,
    doctor_name varchar(100),
    unique_patients int
) as $$
begin
    return query
    select 
        d.doctor_id, 
        d.name as doctor_name, 
        count(distinct a.patient_id) as unique_patients
    from 
        appointments a
    join 
        doctors d on a.doctor_id = d.doctor_id
    group by 
        d.doctor_id, d.name
    order by 
        unique_patients desc
    limit 1;
end;
$$ language plpgsql;


Find appointments where the notes contain the word "fever".
create or replace function get_appointments_with_keyword(keyword text)
returns table (
    appointment_id int,
    patient_name varchar(100),
    doctor_name varchar(100),
    appointment_date date,
    notes text
) as $$
begin
    return query
    select 
        a.appointment_id, 
        p.name as patient_name, 
        d.name as doctor_name, 
        a.appointment_date, 
        a.notes
    from 
        appointments a
    join 
        patients p on a.patient_id = p.patient_id
    join 
        doctors d on a.doctor_id = d.doctor_id
    where 
        lower(a.notes) like '%' || lower(keyword) || '%';
end;
$$ language plpgsql;


Show the count of male and female patients.

create or replace function gender_count()
returns table (
    gender varchar(10),
    count int
) as $$
begin
    return query
    select 
        p.gender, 
        count(*)::int as count
    from 
        patients p
    group by 
        p.gender;
end;
$$ language plpgsql;

select gender_count();



-- inserting the data using the procedure
CREATE OR REPLACE PROCEDURE insert_doctor(
    doctor_name VARCHAR(100),
    specialization VARCHAR(50),
    contact_number VARCHAR(20)
)
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO doctors (name, specialization, contact_number)
    VALUES (doctor_name, specialization, contact_number);
END;
$$;

CREATE OR REPLACE PROCEDURE insert_patient(
    patient_name VARCHAR(100),
    patient_age INT,
    patient_gender VARCHAR(10),
    contact_number VARCHAR(20)
)
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO patients (name, age, gender, contact_number)
    VALUES (patient_name, patient_age, patient_gender, contact_number);
END;
$$;


CREATE OR REPLACE PROCEDURE insert_appointment(
    appointment_patient_id INT,
    appointment_doctor_id INT,
    appointment_date DATE,
    appointment_notes TEXT
)
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO appointments (patient_id, doctor_id, appointment_date, notes)
    VALUES (appointment_patient_id, appointment_doctor_id, appointment_date, appointment_notes);
END;
$$;



